help()
install.packages
installed.packages()
mean(x)
traceback()
lm(y-x)
traceback()
lm(y~x)
traceback()
dbug(lm)
debug(lm)
lm(y-x)
options(error=recover)
read.csv("nosuchfile")
exit
library(datasets)
data(iris)
?iris
iris
rowMeans(iris,1)
rowMeans(iris,1)
0
rowMeans(iris,1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
myMatrix <- x$get()
m <- solve(myMatrix,...)
x$setInverse(m)
m
}
x <- matrix(c(2,2,3,2),nrow=2,ncol=2)
x
x <- makeCacheMatrix(x)
x
cacheSolve(x)
x
x <- matrix(c(2,2,3,2),nrow=2,ncol=2)
x
cacheSolve(x)
debug(cacheSolve)
x <- makeCacheMatrix(x)
cacheSolve(x)
myMatrix
myMatrix$get()
x
x$get()
?solve
x$get()
x <- matrix(c(2,2,3,2),nrow=2,ncol=2)
x <- makeCacheMatrix(x)
x$get()
x$get(x)
x$get
x
x <- matrix(c(2,2,3,2),nrow=2,ncol=2)
y <- makeCacheMatrix()
y <- makeCacheMatrix(x)
y$get()
cacheSolve(y)
undebug(cacheSolve)
cacheSolve(y)
library(swirl)
swirl()
5 + 7
x <- 5+7
x
x
library(swirl)
swirl()
library(swirl)
swirl()
y <- x -3
y
z <- c(1.1,9,3.14)
?c
z
z <- c(z, 555)
x <- c(z,555,z)
info()
c(z,555,z)
z*2+100
my_sqrt <- (z-1)^(1/2)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
data.frame
?data.frame
?sample
cbind(sample(1:1000,50000),sample(1:50,50000))
sample(1000)
cbind(sample(1000,45000),sample(1000,45000))
cbind(1:50000,1:50000)
write.table(cbind(1:50000,1:50000))
write.table(cbind(1:50000,1:50000), file="over44000.csv")
getwd()
getwd
getwd()
setwd("~/Documents/uci-hackathon-app/M2C Sample/")
ls
getwd()
ls()
ls(.)
list.files(.)
list.files(path = '.')
dir.create(path = '../rscripts')
setwd('../rscripts/')
devices <- read.csv(file = '../M2C Sample/devices.csv', header = F)
devices
head(devices)
